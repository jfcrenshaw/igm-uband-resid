from config_control import ConfigFlagger, save_config

# the default config
# you can specify a new config by running
# python -m snakemake -c1 --configfile config/new_config.yaml
# keys/values missing from the new config will be pulled from the default config
default_config = "config/default_config.yaml"
configfile: default_config

# set the names of outputs
truth_catalog = "data/raw/Euclid_trim_27p10_3p5_IR_4NUV.dat"
lines_of_sight = f"data/processed/{config['catalog']['name']}_Lya_lines_of_sight.pkl"
observed_catalog = f"data/processed/{config['catalog']['name']}_Lya.pkl"
ensembles = [
    f"models/{config['catalog']['name']}_trained_on_lsst.pkl",
    f"models/{config['catalog']['name']}_trained_on_lsst+euclid.pkl",
]
training_losses = [
    f"models/losses/{config['catalog']['name']}_trained_on_lsst_losses.pkl",
    f"models/losses/{config['catalog']['name']}_trained_on_lsst+euclid_losses.pkl",
]
results_dir = f"results/{config['catalog']['name']}"
figures = {
    name: f"{results_dir}/{name}.{settings['format']}" 
    for name, settings in config["plotting"].items()
    if name != "rcParams"
}


# set path to the full config to be checked against and then saved
full_config = f"{results_dir}/full_config.yaml"
# set up the config flagger
config_flagger = ConfigFlagger(config, full_config)


# save the current config
onstart:
    save_config(config, full_config, default_config)

rule all:
    input:
        truth_catalog,
        lines_of_sight,
        observed_catalog,
        ensembles,
        training_losses,
        list(figures.values()),


rule download_truth_catalog:
    output:
        "data/raw/{truth_catalog}"
    shell: 
        "wget https://github.com/jfcrenshaw/igm-uband-resid/releases/download/"
        "truth_catalog/{wildcards.truth_catalog} ;"
        "mv {wildcards.truth_catalog} data/raw/{wildcards.truth_catalog}"


rule build_observed_catalog:
    input:
        config_flagger.flag("catalog"),
        truth_catalog,
    output:
        lines_of_sight,
        observed_catalog,
    script:
        "scripts/build_observed_catalog.py"


rule plot_lya_forest:
    input:
        config_flagger.flag("plotting", "rcParams"),
        config_flagger.flag("plotting", "forest_spectra"),
        config_flagger.flag("plotting", "W_vs_NHI"),
        config_flagger.flag("plotting", "du_tau_hist"),
        lines_of_sight,
    output:
        figures["forest_spectra"],
        figures["W_vs_NHI"],
        figures["du_tau_hist"],
    script:
        "scripts/plot_lya_forest.py"


rule train_ensembles:
    input:
        config_flagger.flag("ensembles"),
        observed_catalog
    output:
        ensembles,
        training_losses,
    script:
        "scripts/train_ensembles.py"

# rule plot_training_losses
# rule redshift_cuts:
# rule fit_optical_depths: